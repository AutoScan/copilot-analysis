Object.defineProperty(exports, "__esModule", {
  value: !0
});
exports.logger = exports.createProductionContext = void 0;
const r = require(1402);
const i = require(10299);
const config = require("./config");
const s = require(47870);
const a = require(68281);
const c = require(59189);
const abtest = require("./abtest");
const u = require(38965);
const p = require(94777);
const language = require("./language");
const logger = require("./logger");
const f = require(29094);
const m = require(45808);
const request = require("./request");
const y = require(24419);
const _ = require(69636);
const telemetry = require("./telemetry");
const env = require("./env");
const E = require(26071);
const realurlopener = require("./real-url-opener");
exports.createProductionContext = function (e) {
  const n = new s.Context();
  n.set(config.ConfigProvider, e);
  n.set(i.Clock, new i.Clock());
  n.set(config.BuildInfo, new config.BuildInfo());
  (function (e) {
    e.set(env.RuntimeMode, env.RuntimeMode.fromEnvironment(!1));
    e.set(logger.LogVerbose, new logger.LogVerbose(env.isVerboseLoggingEnabled(e)));
    e.set(logger.LogTarget, new logger.ConsoleLog(console));
  })(n);
  exports.logger.debug(n, "Initializing main context");
  n.set(r.CopilotTokenNotifier, new r.CopilotTokenNotifier());
  n.set(f.RootCertificateReader, f.getRootCertificateReader(n));
  n.set(request.Fetcher, new m.HelixFetcher(n));
  n.set(language.LanguageDetection, language.getLanguageDetection(n));
  n.set(c.Features, new c.Features(n));
  n.set(_.PostInsertionNotifier, new _.PostInsertionNotifier());
  n.set(telemetry.TelemetryUserConfig, new telemetry.TelemetryUserConfig(n));
  n.set(telemetry.TelemetryEndpointUrl, new telemetry.TelemetryEndpointUrl());
  n.set(telemetry.TelemetryReporters, new telemetry.TelemetryReporters());
  n.set(p.HeaderContributors, new p.HeaderContributors());
  n.set(a.UserErrorNotifier, new a.UserErrorNotifier(n));
  n.set(u.ContextualFilterManager, new u.ContextualFilterManager());
  n.set(y.OpenAIFetcher, new y.LiveOpenAIFetcher());
  n.set(config.BlockModeConfig, new config.ConfigBlockModeConfig());
  n.set(realurlopener.UrlOpener, new realurlopener.RealUrlOpener());
  n.set(abtest.ExpConfigMaker, new abtest.ExpConfigNone());
  n.set(E.PromiseQueue, new E.PromiseQueue());
  return n;
};
exports.logger = new logger.Logger(logger.LogLevel.DEBUG, "context");